name: NAKEDai L.I.F.E. Unbreakable Backup & Sync
# Copyright 2025 - Sergio Paya Borrull
# Revolutionary 45 TOPS Neural Computing Glasses - Launch Day Sept 27, 2025

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]
    schedule:
        # Daily backup at 3 AM UTC (unbreakable consistency)
        - cron: "0 3 * * *"
    workflow_dispatch:
        inputs:
            backup_type:
                description: "Backup Type"
                required: true
                default: "full"
                type: choice
                options:
                    - full
                    - incremental
                    - emergency

env:
    AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    AZURE_RESOURCE_GROUP: nakedai-life-unbreakable-rg
    AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
    AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
    NAKEDAI_VERSION: "2025.09.27-LAUNCH"

jobs:
    unbreakable-backup:
        name: üöÄ NAKEDai L.I.F.E. Unbreakable Backup
        runs-on: ubuntu-latest

        steps:
            - name: üéØ Checkout NAKEDai L.I.F.E. Repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Full history for complete backup

            - name: üîß Setup Azure CLI
              uses: azure/CLI@v1
              with:
                  azcliversion: latest

            - name: üîê Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: üìä NAKEDai System Status Check
              run: |
                  echo "üöÄ NAKEDai L.I.F.E. Integration System Status"
                  echo "=============================================="
                  echo "Launch Date: September 27, 2025"
                  echo "Azure Marketplace Offer: 9a600d96-fe1e-420b-902a-a0c42c561adb"
                  echo "Hardware: 45 TOPS Snapdragon X Elite"
                  echo "Displays: Dual 4K OLED Stereoscopic"
                  echo "Neural Sensors: 24 EEG + 8 Photonic"
                  echo "Performance Target: <1ms, 98-99% accuracy"
                  echo "Venturi System: Dual cooling + neural boost"
                  echo "=============================================="

                  # Check critical files
                  echo "üîç Checking critical NAKEDai files..."
                  for file in "NAKEDai_LIFE_Integration_System.py" \
                             "experimentP2L.I.F.E-Learning-Individually-from-Experience-Theory-Algorithm-Code-2025-Copyright-Se.py" \
                             "NAKEDAI_VISUAL_PROTOTYPES_REALISTIC_MOCKUPS.md" \
                             "NAKEDAI_COPYRIGHT_IP_PROTECTION_STRATEGY.md" \
                             "NAKEDAI_VENTURI_DUAL_FUNCTION_SYSTEM_BREAKTHROUGH.md" \
                             "NAKEDAI_LIFE_CORE_MATHEMATICAL_FRAMEWORK_COMPLETE.md"
                  do
                    if [ -f "$file" ]; then
                      echo "‚úÖ $file - $(wc -l < "$file") lines"
                    else
                      echo "‚ö†Ô∏è  $file - MISSING"
                    fi
                  done

            - name: üóúÔ∏è Create Compressed Backup Archive
              run: |
                  echo "üì¶ Creating NAKEDai L.I.F.E. backup archive..."

                  # Create timestamp for this backup
                  TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                  BACKUP_NAME="nakedai-life-backup-${TIMESTAMP}"

                  # Create backup directory
                  mkdir -p ${BACKUP_NAME}

                  # Copy all critical files
                  cp -r . ${BACKUP_NAME}/ || true

                  # Create metadata file
                  cat > ${BACKUP_NAME}/BACKUP_METADATA.json << EOF
                  {
                    "backup_timestamp": "${TIMESTAMP}",
                    "backup_type": "${{ github.event.inputs.backup_type || 'scheduled' }}",
                    "nakedai_version": "${NAKEDAI_VERSION}",
                    "git_commit": "${GITHUB_SHA:0:8}",
                    "git_branch": "${GITHUB_REF_NAME}",
                    "azure_subscription": "${AZURE_SUBSCRIPTION_ID}",
                    "marketplace_offer_id": "9a600d96-fe1e-420b-902a-a0c42c561adb",
                    "launch_date": "2025-09-27",
                    "backup_features": [
                      "45 TOPS neural processing integration",
                      "Dual 4K OLED display specifications",
                      "Multi-modal sensor fusion (24 EEG + 8 photonic)",
                      "Venturi dual function system (cooling + neural)",
                      "Sub-millisecond processing algorithms",
                      "98-99% accuracy validation system",
                      "Revolutionary neural computing glasses"
                    ]
                  }
                  EOF

                  # Compress backup
                  tar -czf ${BACKUP_NAME}.tar.gz ${BACKUP_NAME}/

                  echo "‚úÖ Backup archive created: ${BACKUP_NAME}.tar.gz"
                  echo "BACKUP_NAME=${BACKUP_NAME}" >> $GITHUB_ENV
                  echo "BACKUP_FILE=${BACKUP_NAME}.tar.gz" >> $GITHUB_ENV

            - name: ‚òÅÔ∏è Upload to Azure Blob Storage (Geo-Redundant)
              run: |
                  echo "üåç Uploading to geo-redundant Azure storage..."

                  # Upload compressed backup
                  az storage blob upload \
                    --account-name $AZURE_STORAGE_ACCOUNT \
                    --account-key $AZURE_STORAGE_KEY \
                    --container-name "nakedai-source-code" \
                    --name "backups/$BACKUP_FILE" \
                    --file "$BACKUP_FILE" \
                    --overwrite true

                  # Upload individual critical files for easy access
                  for file in "NAKEDai_LIFE_Integration_System.py" \
                             "experimentP2L.I.F.E-Learning-Individually-from-Experience-Theory-Algorithm-Code-2025-Copyright-Se.py" \
                             "NAKEDAI_VISUAL_PROTOTYPES_REALISTIC_MOCKUPS.md" \
                             "NAKEDAI_COPYRIGHT_IP_PROTECTION_STRATEGY.md" \
                             "NAKEDAI_VENTURI_DUAL_FUNCTION_SYSTEM_BREAKTHROUGH.md" \
                             "NAKEDAI_LIFE_CORE_MATHEMATICAL_FRAMEWORK_COMPLETE.md" \
                             "UNBREAKABLE_AZURE_BACKUP_SYSTEM.ps1"
                  do
                    if [ -f "$file" ]; then
                      echo "üì§ Uploading: $file"
                      az storage blob upload \
                        --account-name $AZURE_STORAGE_ACCOUNT \
                        --account-key $AZURE_STORAGE_KEY \
                        --container-name "nakedai-source-code" \
                        --name "$file" \
                        --file "$file" \
                        --overwrite true
                    fi
                  done

                  echo "‚úÖ All files uploaded to Azure Blob Storage"

            - name: üîê Update Azure Key Vault Secrets
              run: |
                  echo "üóùÔ∏è Updating Azure Key Vault with latest backup info..."

                  # Get Key Vault name from resource group
                  KEYVAULT_NAME=$(az keyvault list --resource-group $AZURE_RESOURCE_GROUP --query "[0].name" -o tsv)

                  if [ ! -z "$KEYVAULT_NAME" ]; then
                    echo "Found Key Vault: $KEYVAULT_NAME"
                    
                    # Update backup information
                    az keyvault secret set \
                      --vault-name $KEYVAULT_NAME \
                      --name "latest-backup-timestamp" \
                      --value "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                      || echo "‚ö†Ô∏è Key Vault update failed (may not exist yet)"
                    
                    az keyvault secret set \
                      --vault-name $KEYVAULT_NAME \
                      --name "latest-backup-commit" \
                      --value "${GITHUB_SHA:0:8}" \
                      || echo "‚ö†Ô∏è Key Vault update failed (may not exist yet)"
                    
                    echo "‚úÖ Key Vault updated with latest backup info"
                  else
                    echo "‚ö†Ô∏è Key Vault not found, skipping secret updates"
                  fi

            - name: üê≥ Build and Push Docker Image (Container Backup)
              run: |
                  echo "üê≥ Creating Docker container backup..."

                  # Create Dockerfile for NAKEDai L.I.F.E. system
                  cat > Dockerfile << EOF
                  FROM python:3.11-slim

                  # NAKEDai L.I.F.E. Integration System
                  # Copyright 2025 - Sergio Paya Borrull
                  LABEL version="${NAKEDAI_VERSION}"
                  LABEL description="Revolutionary 45 TOPS Neural Computing Glasses"
                  LABEL marketplace.offer.id="9a600d96-fe1e-420b-902a-a0c42c561adb"
                  LABEL launch.date="2025-09-27"

                  WORKDIR /nakedai-life

                  # Install dependencies
                  COPY requirements.txt* ./
                  RUN pip install --no-cache-dir -r requirements.txt || pip install numpy pandas asyncio

                  # Copy NAKEDai L.I.F.E. system
                  COPY . .

                  # Set permissions
                  RUN chmod +x *.py

                  # Default command
                  CMD ["python", "NAKEDai_LIFE_Integration_System.py"]
                  EOF

                  # Build and tag image
                  IMAGE_NAME="nakedai-life-system:${NAKEDAI_VERSION}"
                  docker build -t $IMAGE_NAME .

                  echo "‚úÖ Docker image built: $IMAGE_NAME"

                  # If Azure Container Registry is available, push there
                  ACR_NAME=$(az acr list --resource-group $AZURE_RESOURCE_GROUP --query "[0].name" -o tsv 2>/dev/null || echo "")

                  if [ ! -z "$ACR_NAME" ]; then
                    echo "üöÄ Pushing to Azure Container Registry: $ACR_NAME"
                    
                    # Login to ACR
                    az acr login --name $ACR_NAME
                    
                    # Tag and push
                    docker tag $IMAGE_NAME $ACR_NAME.azurecr.io/$IMAGE_NAME
                    docker push $ACR_NAME.azurecr.io/$IMAGE_NAME
                    
                    echo "‚úÖ Docker image pushed to Azure Container Registry"
                  else
                    echo "‚ö†Ô∏è Azure Container Registry not found, skipping Docker push"
                  fi

            - name: üìä Generate Backup Report
              run: |
                  echo "üìã Generating comprehensive backup report..."

                  # Create backup report
                  cat > BACKUP_REPORT.md << EOF
                  # üöÄ NAKEDai L.I.F.E. Backup Report

                  **Backup Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
                  **Backup Type:** ${{ github.event.inputs.backup_type || 'scheduled' }}  
                  **Git Commit:** ${GITHUB_SHA:0:8}  
                  **Branch:** ${GITHUB_REF_NAME}  

                  ## üî• Revolutionary System Backed Up

                  - **NAKEDai Hardware:** 45 TOPS Snapdragon X Elite processor
                  - **Display System:** Dual independent 4K OLED (stereoscopic 3D)
                  - **Neural Sensors:** 24-channel EEG + 8 photonic sensors  
                  - **Venturi System:** Revolutionary dual cooling + neural enhancement
                  - **Performance:** Sub-millisecond processing, 98-99% accuracy
                  - **Weight:** 120g total with 16+ hour battery life
                  - **Launch Date:** September 27, 2025 üéâ

                  ## üì¶ Backup Locations

                  1. **Azure Blob Storage (GRS):** 99.99999999999% durability
                  2. **GitHub Repository:** Version control and collaboration
                  3. **Azure Container Registry:** Docker image backup
                  4. **Azure Key Vault:** Secure secret management

                  ## üîç Files Backed Up

                  EOF

                  # Add file list to report
                  echo "| File | Size | Lines |" >> BACKUP_REPORT.md
                  echo "|------|------|-------|" >> BACKUP_REPORT.md

                  for file in *.py *.md *.txt *.yml *.yaml *.ps1 *.sh; do
                    if [ -f "$file" ]; then
                      SIZE=$(du -h "$file" | cut -f1)
                      LINES=$(wc -l < "$file" 2>/dev/null || echo "0")
                      echo "| $file | $SIZE | $LINES |" >> BACKUP_REPORT.md
                    fi
                  done

                  cat >> BACKUP_REPORT.md << EOF

                  ## üåç Recovery Instructions

                  ### Azure CloudShell Recovery
                  \`\`\`bash
                  # Quick recovery command
                  az storage blob download-batch \\
                    --account-name $AZURE_STORAGE_ACCOUNT \\
                    --source nakedai-source-code \\
                    --destination ./nakedai-recovery \\
                    --auth-mode key
                  \`\`\`

                  ### GitHub Clone
                  \`\`\`bash
                  git clone https://github.com/SergiLIFE/SergiLIFE-life-azure-system.git
                  \`\`\`

                  ## ‚úÖ Backup Status: COMPLETE

                  **Your revolutionary NAKEDai L.I.F.E. system is safely backed up across multiple redundant systems!**

                  üéØ Ready to change the world with 45 TOPS neural computing! üöÄ
                  EOF

                  echo "‚úÖ Backup report generated"

                  # Upload report to Azure
                  az storage blob upload \
                    --account-name $AZURE_STORAGE_ACCOUNT \
                    --account-key $AZURE_STORAGE_KEY \
                    --container-name "daily-snapshots" \
                    --name "BACKUP_REPORT_$(date +%Y%m%d_%H%M%S).md" \
                    --file "BACKUP_REPORT.md" \
                    --overwrite true

            - name: üéâ Success Notification
              run: |
                  echo ""
                  echo "üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ"
                  echo "‚úÖ NAKEDai L.I.F.E. UNBREAKABLE BACKUP COMPLETE!"
                  echo "üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ"
                  echo ""
                  echo "üöÄ Revolutionary System Status:"
                  echo "   ‚Ä¢ Hardware: 45 TOPS Snapdragon X Elite ‚úÖ"
                  echo "   ‚Ä¢ Displays: Dual 4K OLED Stereoscopic ‚úÖ"  
                  echo "   ‚Ä¢ Sensors: 24 EEG + 8 Photonic ‚úÖ"
                  echo "   ‚Ä¢ Venturi: Dual Cooling + Neural Boost ‚úÖ"
                  echo "   ‚Ä¢ Performance: <1ms, 98-99% Accuracy ‚úÖ"
                  echo "   ‚Ä¢ Manufacturing: Jabil Partnership ‚úÖ"
                  echo "   ‚Ä¢ Launch: September 27, 2025 ‚úÖ"
                  echo ""
                  echo "üîí Backup Security:"
                  echo "   ‚Ä¢ Azure Blob Storage (GRS): 16 nines durability ‚úÖ"
                  echo "   ‚Ä¢ GitHub Repository: Version control ‚úÖ"
                  echo "   ‚Ä¢ Azure Container Registry: Docker backup ‚úÖ"
                  echo "   ‚Ä¢ Azure Key Vault: Secret management ‚úÖ"
                  echo ""
                  echo "üåç READY TO CHANGE THE WORLD! üöÄ"
                  echo ""

    verify-backup:
        name: üîç Verify Backup Integrity
        needs: unbreakable-backup
        runs-on: ubuntu-latest

        steps:
            - name: üîê Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: üîß Setup Azure CLI
              uses: azure/CLI@v1
              with:
                  azcliversion: latest

            - name: ‚úÖ Verify Azure Backup Integrity
              run: |
                  echo "üîç Verifying NAKEDai L.I.F.E. backup integrity..."

                  # List all backed up files
                  echo "üìã Backed up files in Azure:"
                  az storage blob list \
                    --account-name $AZURE_STORAGE_ACCOUNT \
                    --account-key $AZURE_STORAGE_KEY \
                    --container-name "nakedai-source-code" \
                    --output table

                  # Verify critical files exist
                  CRITICAL_FILES=(
                    "NAKEDai_LIFE_Integration_System.py"
                    "experimentP2L.I.F.E-Learning-Individually-from-Experience-Theory-Algorithm-Code-2025-Copyright-Se.py"
                    "NAKEDAI_VISUAL_PROTOTYPES_REALISTIC_MOCKUPS.md"
                    "NAKEDAI_COPYRIGHT_IP_PROTECTION_STRATEGY.md"
                    "NAKEDAI_VENTURI_DUAL_FUNCTION_SYSTEM_BREAKTHROUGH.md"
                    "NAKEDAI_LIFE_CORE_MATHEMATICAL_FRAMEWORK_COMPLETE.md"
                  )

                  echo ""
                  echo "üéØ Verifying critical NAKEDai files:"
                  ALL_VERIFIED=true

                  for file in "${CRITICAL_FILES[@]}"; do
                    if az storage blob exists \
                       --account-name $AZURE_STORAGE_ACCOUNT \
                       --account-key $AZURE_STORAGE_KEY \
                       --container-name "nakedai-source-code" \
                       --name "$file" \
                       --output tsv | grep -q "True"; then
                      echo "‚úÖ $file - VERIFIED"
                    else
                      echo "‚ùå $file - MISSING"
                      ALL_VERIFIED=false
                    fi
                  done

                  if [ "$ALL_VERIFIED" = true ]; then
                    echo ""
                    echo "üéâ ALL CRITICAL FILES VERIFIED IN AZURE BACKUP!"
                    echo "üöÄ NAKEDai L.I.F.E. system is safely preserved!"
                    echo "üåç Ready for revolutionary neural computing deployment!"
                  else
                    echo ""
                    echo "‚ö†Ô∏è BACKUP VERIFICATION ISSUES DETECTED"
                    exit 1
                  fi
